Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> command
Rule 2     program -> program command
Rule 3     command -> fd INT
Rule 4     command -> forward INT
Rule 5     command -> bk INT
Rule 6     command -> back INT
Rule 7     command -> lt INT
Rule 8     command -> left INT
Rule 9     command -> rt INT
Rule 10    command -> right INT
Rule 11    command -> setpos [ INT INT ]
Rule 12    command -> setxy INT INT
Rule 13    command -> setx INT
Rule 14    command -> sety INT
Rule 15    command -> penup
Rule 16    command -> pu
Rule 17    command -> pendown
Rule 18    command -> pd
Rule 19    command -> home
Rule 20    command -> setpencolor [ INT INT INT ]
Rule 21    command -> make VARNOME INT
Rule 22    command -> if : VARNOME SINAIS INT [ program ]
Rule 23    command -> ifelse : VARNOME SINAIS INT [ program ]
Rule 24    command -> while [ : VARNOME SINAIS INT ] [ program ]
Rule 25    command -> repeat command

Terminals, with rules where they appear

:                    : 22 23 24
INT                  : 3 4 5 6 7 8 9 10 11 11 12 12 13 14 20 20 20 21 22 23 24
SINAIS               : 22 23 24
VARNOME              : 21 22 23 24
[                    : 11 20 22 23 24 24
]                    : 11 20 22 23 24 24
back                 : 6
bk                   : 5
error                : 
fd                   : 3
forward              : 4
home                 : 19
if                   : 22
ifelse               : 23
left                 : 8
lt                   : 7
make                 : 21
pd                   : 18
pendown              : 17
penup                : 15
pu                   : 16
repeat               : 25
right                : 10
rt                   : 9
setpencolor          : 20
setpos               : 11
setx                 : 13
setxy                : 12
sety                 : 14
while                : 24

Nonterminals, with rules where they appear

command              : 1 2 25
program              : 2 22 23 24 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    program                        shift and go to state 1
    command                        shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    command                        shift and go to state 26

state 2

    (1) program -> command .

    fd              reduce using rule 1 (program -> command .)
    forward         reduce using rule 1 (program -> command .)
    bk              reduce using rule 1 (program -> command .)
    back            reduce using rule 1 (program -> command .)
    lt              reduce using rule 1 (program -> command .)
    left            reduce using rule 1 (program -> command .)
    rt              reduce using rule 1 (program -> command .)
    right           reduce using rule 1 (program -> command .)
    setpos          reduce using rule 1 (program -> command .)
    setxy           reduce using rule 1 (program -> command .)
    setx            reduce using rule 1 (program -> command .)
    sety            reduce using rule 1 (program -> command .)
    penup           reduce using rule 1 (program -> command .)
    pu              reduce using rule 1 (program -> command .)
    pendown         reduce using rule 1 (program -> command .)
    pd              reduce using rule 1 (program -> command .)
    home            reduce using rule 1 (program -> command .)
    setpencolor     reduce using rule 1 (program -> command .)
    make            reduce using rule 1 (program -> command .)
    if              reduce using rule 1 (program -> command .)
    ifelse          reduce using rule 1 (program -> command .)
    while           reduce using rule 1 (program -> command .)
    repeat          reduce using rule 1 (program -> command .)
    $end            reduce using rule 1 (program -> command .)
    ]               reduce using rule 1 (program -> command .)


state 3

    (3) command -> fd . INT

    INT             shift and go to state 27


state 4

    (4) command -> forward . INT

    INT             shift and go to state 28


state 5

    (5) command -> bk . INT

    INT             shift and go to state 29


state 6

    (6) command -> back . INT

    INT             shift and go to state 30


state 7

    (7) command -> lt . INT

    INT             shift and go to state 31


state 8

    (8) command -> left . INT

    INT             shift and go to state 32


state 9

    (9) command -> rt . INT

    INT             shift and go to state 33


state 10

    (10) command -> right . INT

    INT             shift and go to state 34


state 11

    (11) command -> setpos . [ INT INT ]

    [               shift and go to state 35


state 12

    (12) command -> setxy . INT INT

    INT             shift and go to state 36


state 13

    (13) command -> setx . INT

    INT             shift and go to state 37


state 14

    (14) command -> sety . INT

    INT             shift and go to state 38


state 15

    (15) command -> penup .

    fd              reduce using rule 15 (command -> penup .)
    forward         reduce using rule 15 (command -> penup .)
    bk              reduce using rule 15 (command -> penup .)
    back            reduce using rule 15 (command -> penup .)
    lt              reduce using rule 15 (command -> penup .)
    left            reduce using rule 15 (command -> penup .)
    rt              reduce using rule 15 (command -> penup .)
    right           reduce using rule 15 (command -> penup .)
    setpos          reduce using rule 15 (command -> penup .)
    setxy           reduce using rule 15 (command -> penup .)
    setx            reduce using rule 15 (command -> penup .)
    sety            reduce using rule 15 (command -> penup .)
    penup           reduce using rule 15 (command -> penup .)
    pu              reduce using rule 15 (command -> penup .)
    pendown         reduce using rule 15 (command -> penup .)
    pd              reduce using rule 15 (command -> penup .)
    home            reduce using rule 15 (command -> penup .)
    setpencolor     reduce using rule 15 (command -> penup .)
    make            reduce using rule 15 (command -> penup .)
    if              reduce using rule 15 (command -> penup .)
    ifelse          reduce using rule 15 (command -> penup .)
    while           reduce using rule 15 (command -> penup .)
    repeat          reduce using rule 15 (command -> penup .)
    $end            reduce using rule 15 (command -> penup .)
    ]               reduce using rule 15 (command -> penup .)


state 16

    (16) command -> pu .

    fd              reduce using rule 16 (command -> pu .)
    forward         reduce using rule 16 (command -> pu .)
    bk              reduce using rule 16 (command -> pu .)
    back            reduce using rule 16 (command -> pu .)
    lt              reduce using rule 16 (command -> pu .)
    left            reduce using rule 16 (command -> pu .)
    rt              reduce using rule 16 (command -> pu .)
    right           reduce using rule 16 (command -> pu .)
    setpos          reduce using rule 16 (command -> pu .)
    setxy           reduce using rule 16 (command -> pu .)
    setx            reduce using rule 16 (command -> pu .)
    sety            reduce using rule 16 (command -> pu .)
    penup           reduce using rule 16 (command -> pu .)
    pu              reduce using rule 16 (command -> pu .)
    pendown         reduce using rule 16 (command -> pu .)
    pd              reduce using rule 16 (command -> pu .)
    home            reduce using rule 16 (command -> pu .)
    setpencolor     reduce using rule 16 (command -> pu .)
    make            reduce using rule 16 (command -> pu .)
    if              reduce using rule 16 (command -> pu .)
    ifelse          reduce using rule 16 (command -> pu .)
    while           reduce using rule 16 (command -> pu .)
    repeat          reduce using rule 16 (command -> pu .)
    $end            reduce using rule 16 (command -> pu .)
    ]               reduce using rule 16 (command -> pu .)


state 17

    (17) command -> pendown .

    fd              reduce using rule 17 (command -> pendown .)
    forward         reduce using rule 17 (command -> pendown .)
    bk              reduce using rule 17 (command -> pendown .)
    back            reduce using rule 17 (command -> pendown .)
    lt              reduce using rule 17 (command -> pendown .)
    left            reduce using rule 17 (command -> pendown .)
    rt              reduce using rule 17 (command -> pendown .)
    right           reduce using rule 17 (command -> pendown .)
    setpos          reduce using rule 17 (command -> pendown .)
    setxy           reduce using rule 17 (command -> pendown .)
    setx            reduce using rule 17 (command -> pendown .)
    sety            reduce using rule 17 (command -> pendown .)
    penup           reduce using rule 17 (command -> pendown .)
    pu              reduce using rule 17 (command -> pendown .)
    pendown         reduce using rule 17 (command -> pendown .)
    pd              reduce using rule 17 (command -> pendown .)
    home            reduce using rule 17 (command -> pendown .)
    setpencolor     reduce using rule 17 (command -> pendown .)
    make            reduce using rule 17 (command -> pendown .)
    if              reduce using rule 17 (command -> pendown .)
    ifelse          reduce using rule 17 (command -> pendown .)
    while           reduce using rule 17 (command -> pendown .)
    repeat          reduce using rule 17 (command -> pendown .)
    $end            reduce using rule 17 (command -> pendown .)
    ]               reduce using rule 17 (command -> pendown .)


state 18

    (18) command -> pd .

    fd              reduce using rule 18 (command -> pd .)
    forward         reduce using rule 18 (command -> pd .)
    bk              reduce using rule 18 (command -> pd .)
    back            reduce using rule 18 (command -> pd .)
    lt              reduce using rule 18 (command -> pd .)
    left            reduce using rule 18 (command -> pd .)
    rt              reduce using rule 18 (command -> pd .)
    right           reduce using rule 18 (command -> pd .)
    setpos          reduce using rule 18 (command -> pd .)
    setxy           reduce using rule 18 (command -> pd .)
    setx            reduce using rule 18 (command -> pd .)
    sety            reduce using rule 18 (command -> pd .)
    penup           reduce using rule 18 (command -> pd .)
    pu              reduce using rule 18 (command -> pd .)
    pendown         reduce using rule 18 (command -> pd .)
    pd              reduce using rule 18 (command -> pd .)
    home            reduce using rule 18 (command -> pd .)
    setpencolor     reduce using rule 18 (command -> pd .)
    make            reduce using rule 18 (command -> pd .)
    if              reduce using rule 18 (command -> pd .)
    ifelse          reduce using rule 18 (command -> pd .)
    while           reduce using rule 18 (command -> pd .)
    repeat          reduce using rule 18 (command -> pd .)
    $end            reduce using rule 18 (command -> pd .)
    ]               reduce using rule 18 (command -> pd .)


state 19

    (19) command -> home .

    fd              reduce using rule 19 (command -> home .)
    forward         reduce using rule 19 (command -> home .)
    bk              reduce using rule 19 (command -> home .)
    back            reduce using rule 19 (command -> home .)
    lt              reduce using rule 19 (command -> home .)
    left            reduce using rule 19 (command -> home .)
    rt              reduce using rule 19 (command -> home .)
    right           reduce using rule 19 (command -> home .)
    setpos          reduce using rule 19 (command -> home .)
    setxy           reduce using rule 19 (command -> home .)
    setx            reduce using rule 19 (command -> home .)
    sety            reduce using rule 19 (command -> home .)
    penup           reduce using rule 19 (command -> home .)
    pu              reduce using rule 19 (command -> home .)
    pendown         reduce using rule 19 (command -> home .)
    pd              reduce using rule 19 (command -> home .)
    home            reduce using rule 19 (command -> home .)
    setpencolor     reduce using rule 19 (command -> home .)
    make            reduce using rule 19 (command -> home .)
    if              reduce using rule 19 (command -> home .)
    ifelse          reduce using rule 19 (command -> home .)
    while           reduce using rule 19 (command -> home .)
    repeat          reduce using rule 19 (command -> home .)
    $end            reduce using rule 19 (command -> home .)
    ]               reduce using rule 19 (command -> home .)


state 20

    (20) command -> setpencolor . [ INT INT INT ]

    [               shift and go to state 39


state 21

    (21) command -> make . VARNOME INT

    VARNOME         shift and go to state 40


state 22

    (22) command -> if . : VARNOME SINAIS INT [ program ]

    :               shift and go to state 41


state 23

    (23) command -> ifelse . : VARNOME SINAIS INT [ program ]

    :               shift and go to state 42


state 24

    (24) command -> while . [ : VARNOME SINAIS INT ] [ program ]

    [               shift and go to state 43


state 25

    (25) command -> repeat . command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    command                        shift and go to state 44

state 26

    (2) program -> program command .

    fd              reduce using rule 2 (program -> program command .)
    forward         reduce using rule 2 (program -> program command .)
    bk              reduce using rule 2 (program -> program command .)
    back            reduce using rule 2 (program -> program command .)
    lt              reduce using rule 2 (program -> program command .)
    left            reduce using rule 2 (program -> program command .)
    rt              reduce using rule 2 (program -> program command .)
    right           reduce using rule 2 (program -> program command .)
    setpos          reduce using rule 2 (program -> program command .)
    setxy           reduce using rule 2 (program -> program command .)
    setx            reduce using rule 2 (program -> program command .)
    sety            reduce using rule 2 (program -> program command .)
    penup           reduce using rule 2 (program -> program command .)
    pu              reduce using rule 2 (program -> program command .)
    pendown         reduce using rule 2 (program -> program command .)
    pd              reduce using rule 2 (program -> program command .)
    home            reduce using rule 2 (program -> program command .)
    setpencolor     reduce using rule 2 (program -> program command .)
    make            reduce using rule 2 (program -> program command .)
    if              reduce using rule 2 (program -> program command .)
    ifelse          reduce using rule 2 (program -> program command .)
    while           reduce using rule 2 (program -> program command .)
    repeat          reduce using rule 2 (program -> program command .)
    $end            reduce using rule 2 (program -> program command .)
    ]               reduce using rule 2 (program -> program command .)


state 27

    (3) command -> fd INT .

    fd              reduce using rule 3 (command -> fd INT .)
    forward         reduce using rule 3 (command -> fd INT .)
    bk              reduce using rule 3 (command -> fd INT .)
    back            reduce using rule 3 (command -> fd INT .)
    lt              reduce using rule 3 (command -> fd INT .)
    left            reduce using rule 3 (command -> fd INT .)
    rt              reduce using rule 3 (command -> fd INT .)
    right           reduce using rule 3 (command -> fd INT .)
    setpos          reduce using rule 3 (command -> fd INT .)
    setxy           reduce using rule 3 (command -> fd INT .)
    setx            reduce using rule 3 (command -> fd INT .)
    sety            reduce using rule 3 (command -> fd INT .)
    penup           reduce using rule 3 (command -> fd INT .)
    pu              reduce using rule 3 (command -> fd INT .)
    pendown         reduce using rule 3 (command -> fd INT .)
    pd              reduce using rule 3 (command -> fd INT .)
    home            reduce using rule 3 (command -> fd INT .)
    setpencolor     reduce using rule 3 (command -> fd INT .)
    make            reduce using rule 3 (command -> fd INT .)
    if              reduce using rule 3 (command -> fd INT .)
    ifelse          reduce using rule 3 (command -> fd INT .)
    while           reduce using rule 3 (command -> fd INT .)
    repeat          reduce using rule 3 (command -> fd INT .)
    $end            reduce using rule 3 (command -> fd INT .)
    ]               reduce using rule 3 (command -> fd INT .)


state 28

    (4) command -> forward INT .

    fd              reduce using rule 4 (command -> forward INT .)
    forward         reduce using rule 4 (command -> forward INT .)
    bk              reduce using rule 4 (command -> forward INT .)
    back            reduce using rule 4 (command -> forward INT .)
    lt              reduce using rule 4 (command -> forward INT .)
    left            reduce using rule 4 (command -> forward INT .)
    rt              reduce using rule 4 (command -> forward INT .)
    right           reduce using rule 4 (command -> forward INT .)
    setpos          reduce using rule 4 (command -> forward INT .)
    setxy           reduce using rule 4 (command -> forward INT .)
    setx            reduce using rule 4 (command -> forward INT .)
    sety            reduce using rule 4 (command -> forward INT .)
    penup           reduce using rule 4 (command -> forward INT .)
    pu              reduce using rule 4 (command -> forward INT .)
    pendown         reduce using rule 4 (command -> forward INT .)
    pd              reduce using rule 4 (command -> forward INT .)
    home            reduce using rule 4 (command -> forward INT .)
    setpencolor     reduce using rule 4 (command -> forward INT .)
    make            reduce using rule 4 (command -> forward INT .)
    if              reduce using rule 4 (command -> forward INT .)
    ifelse          reduce using rule 4 (command -> forward INT .)
    while           reduce using rule 4 (command -> forward INT .)
    repeat          reduce using rule 4 (command -> forward INT .)
    $end            reduce using rule 4 (command -> forward INT .)
    ]               reduce using rule 4 (command -> forward INT .)


state 29

    (5) command -> bk INT .

    fd              reduce using rule 5 (command -> bk INT .)
    forward         reduce using rule 5 (command -> bk INT .)
    bk              reduce using rule 5 (command -> bk INT .)
    back            reduce using rule 5 (command -> bk INT .)
    lt              reduce using rule 5 (command -> bk INT .)
    left            reduce using rule 5 (command -> bk INT .)
    rt              reduce using rule 5 (command -> bk INT .)
    right           reduce using rule 5 (command -> bk INT .)
    setpos          reduce using rule 5 (command -> bk INT .)
    setxy           reduce using rule 5 (command -> bk INT .)
    setx            reduce using rule 5 (command -> bk INT .)
    sety            reduce using rule 5 (command -> bk INT .)
    penup           reduce using rule 5 (command -> bk INT .)
    pu              reduce using rule 5 (command -> bk INT .)
    pendown         reduce using rule 5 (command -> bk INT .)
    pd              reduce using rule 5 (command -> bk INT .)
    home            reduce using rule 5 (command -> bk INT .)
    setpencolor     reduce using rule 5 (command -> bk INT .)
    make            reduce using rule 5 (command -> bk INT .)
    if              reduce using rule 5 (command -> bk INT .)
    ifelse          reduce using rule 5 (command -> bk INT .)
    while           reduce using rule 5 (command -> bk INT .)
    repeat          reduce using rule 5 (command -> bk INT .)
    $end            reduce using rule 5 (command -> bk INT .)
    ]               reduce using rule 5 (command -> bk INT .)


state 30

    (6) command -> back INT .

    fd              reduce using rule 6 (command -> back INT .)
    forward         reduce using rule 6 (command -> back INT .)
    bk              reduce using rule 6 (command -> back INT .)
    back            reduce using rule 6 (command -> back INT .)
    lt              reduce using rule 6 (command -> back INT .)
    left            reduce using rule 6 (command -> back INT .)
    rt              reduce using rule 6 (command -> back INT .)
    right           reduce using rule 6 (command -> back INT .)
    setpos          reduce using rule 6 (command -> back INT .)
    setxy           reduce using rule 6 (command -> back INT .)
    setx            reduce using rule 6 (command -> back INT .)
    sety            reduce using rule 6 (command -> back INT .)
    penup           reduce using rule 6 (command -> back INT .)
    pu              reduce using rule 6 (command -> back INT .)
    pendown         reduce using rule 6 (command -> back INT .)
    pd              reduce using rule 6 (command -> back INT .)
    home            reduce using rule 6 (command -> back INT .)
    setpencolor     reduce using rule 6 (command -> back INT .)
    make            reduce using rule 6 (command -> back INT .)
    if              reduce using rule 6 (command -> back INT .)
    ifelse          reduce using rule 6 (command -> back INT .)
    while           reduce using rule 6 (command -> back INT .)
    repeat          reduce using rule 6 (command -> back INT .)
    $end            reduce using rule 6 (command -> back INT .)
    ]               reduce using rule 6 (command -> back INT .)


state 31

    (7) command -> lt INT .

    fd              reduce using rule 7 (command -> lt INT .)
    forward         reduce using rule 7 (command -> lt INT .)
    bk              reduce using rule 7 (command -> lt INT .)
    back            reduce using rule 7 (command -> lt INT .)
    lt              reduce using rule 7 (command -> lt INT .)
    left            reduce using rule 7 (command -> lt INT .)
    rt              reduce using rule 7 (command -> lt INT .)
    right           reduce using rule 7 (command -> lt INT .)
    setpos          reduce using rule 7 (command -> lt INT .)
    setxy           reduce using rule 7 (command -> lt INT .)
    setx            reduce using rule 7 (command -> lt INT .)
    sety            reduce using rule 7 (command -> lt INT .)
    penup           reduce using rule 7 (command -> lt INT .)
    pu              reduce using rule 7 (command -> lt INT .)
    pendown         reduce using rule 7 (command -> lt INT .)
    pd              reduce using rule 7 (command -> lt INT .)
    home            reduce using rule 7 (command -> lt INT .)
    setpencolor     reduce using rule 7 (command -> lt INT .)
    make            reduce using rule 7 (command -> lt INT .)
    if              reduce using rule 7 (command -> lt INT .)
    ifelse          reduce using rule 7 (command -> lt INT .)
    while           reduce using rule 7 (command -> lt INT .)
    repeat          reduce using rule 7 (command -> lt INT .)
    $end            reduce using rule 7 (command -> lt INT .)
    ]               reduce using rule 7 (command -> lt INT .)


state 32

    (8) command -> left INT .

    fd              reduce using rule 8 (command -> left INT .)
    forward         reduce using rule 8 (command -> left INT .)
    bk              reduce using rule 8 (command -> left INT .)
    back            reduce using rule 8 (command -> left INT .)
    lt              reduce using rule 8 (command -> left INT .)
    left            reduce using rule 8 (command -> left INT .)
    rt              reduce using rule 8 (command -> left INT .)
    right           reduce using rule 8 (command -> left INT .)
    setpos          reduce using rule 8 (command -> left INT .)
    setxy           reduce using rule 8 (command -> left INT .)
    setx            reduce using rule 8 (command -> left INT .)
    sety            reduce using rule 8 (command -> left INT .)
    penup           reduce using rule 8 (command -> left INT .)
    pu              reduce using rule 8 (command -> left INT .)
    pendown         reduce using rule 8 (command -> left INT .)
    pd              reduce using rule 8 (command -> left INT .)
    home            reduce using rule 8 (command -> left INT .)
    setpencolor     reduce using rule 8 (command -> left INT .)
    make            reduce using rule 8 (command -> left INT .)
    if              reduce using rule 8 (command -> left INT .)
    ifelse          reduce using rule 8 (command -> left INT .)
    while           reduce using rule 8 (command -> left INT .)
    repeat          reduce using rule 8 (command -> left INT .)
    $end            reduce using rule 8 (command -> left INT .)
    ]               reduce using rule 8 (command -> left INT .)


state 33

    (9) command -> rt INT .

    fd              reduce using rule 9 (command -> rt INT .)
    forward         reduce using rule 9 (command -> rt INT .)
    bk              reduce using rule 9 (command -> rt INT .)
    back            reduce using rule 9 (command -> rt INT .)
    lt              reduce using rule 9 (command -> rt INT .)
    left            reduce using rule 9 (command -> rt INT .)
    rt              reduce using rule 9 (command -> rt INT .)
    right           reduce using rule 9 (command -> rt INT .)
    setpos          reduce using rule 9 (command -> rt INT .)
    setxy           reduce using rule 9 (command -> rt INT .)
    setx            reduce using rule 9 (command -> rt INT .)
    sety            reduce using rule 9 (command -> rt INT .)
    penup           reduce using rule 9 (command -> rt INT .)
    pu              reduce using rule 9 (command -> rt INT .)
    pendown         reduce using rule 9 (command -> rt INT .)
    pd              reduce using rule 9 (command -> rt INT .)
    home            reduce using rule 9 (command -> rt INT .)
    setpencolor     reduce using rule 9 (command -> rt INT .)
    make            reduce using rule 9 (command -> rt INT .)
    if              reduce using rule 9 (command -> rt INT .)
    ifelse          reduce using rule 9 (command -> rt INT .)
    while           reduce using rule 9 (command -> rt INT .)
    repeat          reduce using rule 9 (command -> rt INT .)
    $end            reduce using rule 9 (command -> rt INT .)
    ]               reduce using rule 9 (command -> rt INT .)


state 34

    (10) command -> right INT .

    fd              reduce using rule 10 (command -> right INT .)
    forward         reduce using rule 10 (command -> right INT .)
    bk              reduce using rule 10 (command -> right INT .)
    back            reduce using rule 10 (command -> right INT .)
    lt              reduce using rule 10 (command -> right INT .)
    left            reduce using rule 10 (command -> right INT .)
    rt              reduce using rule 10 (command -> right INT .)
    right           reduce using rule 10 (command -> right INT .)
    setpos          reduce using rule 10 (command -> right INT .)
    setxy           reduce using rule 10 (command -> right INT .)
    setx            reduce using rule 10 (command -> right INT .)
    sety            reduce using rule 10 (command -> right INT .)
    penup           reduce using rule 10 (command -> right INT .)
    pu              reduce using rule 10 (command -> right INT .)
    pendown         reduce using rule 10 (command -> right INT .)
    pd              reduce using rule 10 (command -> right INT .)
    home            reduce using rule 10 (command -> right INT .)
    setpencolor     reduce using rule 10 (command -> right INT .)
    make            reduce using rule 10 (command -> right INT .)
    if              reduce using rule 10 (command -> right INT .)
    ifelse          reduce using rule 10 (command -> right INT .)
    while           reduce using rule 10 (command -> right INT .)
    repeat          reduce using rule 10 (command -> right INT .)
    $end            reduce using rule 10 (command -> right INT .)
    ]               reduce using rule 10 (command -> right INT .)


state 35

    (11) command -> setpos [ . INT INT ]

    INT             shift and go to state 45


state 36

    (12) command -> setxy INT . INT

    INT             shift and go to state 46


state 37

    (13) command -> setx INT .

    fd              reduce using rule 13 (command -> setx INT .)
    forward         reduce using rule 13 (command -> setx INT .)
    bk              reduce using rule 13 (command -> setx INT .)
    back            reduce using rule 13 (command -> setx INT .)
    lt              reduce using rule 13 (command -> setx INT .)
    left            reduce using rule 13 (command -> setx INT .)
    rt              reduce using rule 13 (command -> setx INT .)
    right           reduce using rule 13 (command -> setx INT .)
    setpos          reduce using rule 13 (command -> setx INT .)
    setxy           reduce using rule 13 (command -> setx INT .)
    setx            reduce using rule 13 (command -> setx INT .)
    sety            reduce using rule 13 (command -> setx INT .)
    penup           reduce using rule 13 (command -> setx INT .)
    pu              reduce using rule 13 (command -> setx INT .)
    pendown         reduce using rule 13 (command -> setx INT .)
    pd              reduce using rule 13 (command -> setx INT .)
    home            reduce using rule 13 (command -> setx INT .)
    setpencolor     reduce using rule 13 (command -> setx INT .)
    make            reduce using rule 13 (command -> setx INT .)
    if              reduce using rule 13 (command -> setx INT .)
    ifelse          reduce using rule 13 (command -> setx INT .)
    while           reduce using rule 13 (command -> setx INT .)
    repeat          reduce using rule 13 (command -> setx INT .)
    $end            reduce using rule 13 (command -> setx INT .)
    ]               reduce using rule 13 (command -> setx INT .)


state 38

    (14) command -> sety INT .

    fd              reduce using rule 14 (command -> sety INT .)
    forward         reduce using rule 14 (command -> sety INT .)
    bk              reduce using rule 14 (command -> sety INT .)
    back            reduce using rule 14 (command -> sety INT .)
    lt              reduce using rule 14 (command -> sety INT .)
    left            reduce using rule 14 (command -> sety INT .)
    rt              reduce using rule 14 (command -> sety INT .)
    right           reduce using rule 14 (command -> sety INT .)
    setpos          reduce using rule 14 (command -> sety INT .)
    setxy           reduce using rule 14 (command -> sety INT .)
    setx            reduce using rule 14 (command -> sety INT .)
    sety            reduce using rule 14 (command -> sety INT .)
    penup           reduce using rule 14 (command -> sety INT .)
    pu              reduce using rule 14 (command -> sety INT .)
    pendown         reduce using rule 14 (command -> sety INT .)
    pd              reduce using rule 14 (command -> sety INT .)
    home            reduce using rule 14 (command -> sety INT .)
    setpencolor     reduce using rule 14 (command -> sety INT .)
    make            reduce using rule 14 (command -> sety INT .)
    if              reduce using rule 14 (command -> sety INT .)
    ifelse          reduce using rule 14 (command -> sety INT .)
    while           reduce using rule 14 (command -> sety INT .)
    repeat          reduce using rule 14 (command -> sety INT .)
    $end            reduce using rule 14 (command -> sety INT .)
    ]               reduce using rule 14 (command -> sety INT .)


state 39

    (20) command -> setpencolor [ . INT INT INT ]

    INT             shift and go to state 47


state 40

    (21) command -> make VARNOME . INT

    INT             shift and go to state 48


state 41

    (22) command -> if : . VARNOME SINAIS INT [ program ]

    VARNOME         shift and go to state 49


state 42

    (23) command -> ifelse : . VARNOME SINAIS INT [ program ]

    VARNOME         shift and go to state 50


state 43

    (24) command -> while [ . : VARNOME SINAIS INT ] [ program ]

    :               shift and go to state 51


state 44

    (25) command -> repeat command .

    fd              reduce using rule 25 (command -> repeat command .)
    forward         reduce using rule 25 (command -> repeat command .)
    bk              reduce using rule 25 (command -> repeat command .)
    back            reduce using rule 25 (command -> repeat command .)
    lt              reduce using rule 25 (command -> repeat command .)
    left            reduce using rule 25 (command -> repeat command .)
    rt              reduce using rule 25 (command -> repeat command .)
    right           reduce using rule 25 (command -> repeat command .)
    setpos          reduce using rule 25 (command -> repeat command .)
    setxy           reduce using rule 25 (command -> repeat command .)
    setx            reduce using rule 25 (command -> repeat command .)
    sety            reduce using rule 25 (command -> repeat command .)
    penup           reduce using rule 25 (command -> repeat command .)
    pu              reduce using rule 25 (command -> repeat command .)
    pendown         reduce using rule 25 (command -> repeat command .)
    pd              reduce using rule 25 (command -> repeat command .)
    home            reduce using rule 25 (command -> repeat command .)
    setpencolor     reduce using rule 25 (command -> repeat command .)
    make            reduce using rule 25 (command -> repeat command .)
    if              reduce using rule 25 (command -> repeat command .)
    ifelse          reduce using rule 25 (command -> repeat command .)
    while           reduce using rule 25 (command -> repeat command .)
    repeat          reduce using rule 25 (command -> repeat command .)
    $end            reduce using rule 25 (command -> repeat command .)
    ]               reduce using rule 25 (command -> repeat command .)


state 45

    (11) command -> setpos [ INT . INT ]

    INT             shift and go to state 52


state 46

    (12) command -> setxy INT INT .

    fd              reduce using rule 12 (command -> setxy INT INT .)
    forward         reduce using rule 12 (command -> setxy INT INT .)
    bk              reduce using rule 12 (command -> setxy INT INT .)
    back            reduce using rule 12 (command -> setxy INT INT .)
    lt              reduce using rule 12 (command -> setxy INT INT .)
    left            reduce using rule 12 (command -> setxy INT INT .)
    rt              reduce using rule 12 (command -> setxy INT INT .)
    right           reduce using rule 12 (command -> setxy INT INT .)
    setpos          reduce using rule 12 (command -> setxy INT INT .)
    setxy           reduce using rule 12 (command -> setxy INT INT .)
    setx            reduce using rule 12 (command -> setxy INT INT .)
    sety            reduce using rule 12 (command -> setxy INT INT .)
    penup           reduce using rule 12 (command -> setxy INT INT .)
    pu              reduce using rule 12 (command -> setxy INT INT .)
    pendown         reduce using rule 12 (command -> setxy INT INT .)
    pd              reduce using rule 12 (command -> setxy INT INT .)
    home            reduce using rule 12 (command -> setxy INT INT .)
    setpencolor     reduce using rule 12 (command -> setxy INT INT .)
    make            reduce using rule 12 (command -> setxy INT INT .)
    if              reduce using rule 12 (command -> setxy INT INT .)
    ifelse          reduce using rule 12 (command -> setxy INT INT .)
    while           reduce using rule 12 (command -> setxy INT INT .)
    repeat          reduce using rule 12 (command -> setxy INT INT .)
    $end            reduce using rule 12 (command -> setxy INT INT .)
    ]               reduce using rule 12 (command -> setxy INT INT .)


state 47

    (20) command -> setpencolor [ INT . INT INT ]

    INT             shift and go to state 53


state 48

    (21) command -> make VARNOME INT .

    fd              reduce using rule 21 (command -> make VARNOME INT .)
    forward         reduce using rule 21 (command -> make VARNOME INT .)
    bk              reduce using rule 21 (command -> make VARNOME INT .)
    back            reduce using rule 21 (command -> make VARNOME INT .)
    lt              reduce using rule 21 (command -> make VARNOME INT .)
    left            reduce using rule 21 (command -> make VARNOME INT .)
    rt              reduce using rule 21 (command -> make VARNOME INT .)
    right           reduce using rule 21 (command -> make VARNOME INT .)
    setpos          reduce using rule 21 (command -> make VARNOME INT .)
    setxy           reduce using rule 21 (command -> make VARNOME INT .)
    setx            reduce using rule 21 (command -> make VARNOME INT .)
    sety            reduce using rule 21 (command -> make VARNOME INT .)
    penup           reduce using rule 21 (command -> make VARNOME INT .)
    pu              reduce using rule 21 (command -> make VARNOME INT .)
    pendown         reduce using rule 21 (command -> make VARNOME INT .)
    pd              reduce using rule 21 (command -> make VARNOME INT .)
    home            reduce using rule 21 (command -> make VARNOME INT .)
    setpencolor     reduce using rule 21 (command -> make VARNOME INT .)
    make            reduce using rule 21 (command -> make VARNOME INT .)
    if              reduce using rule 21 (command -> make VARNOME INT .)
    ifelse          reduce using rule 21 (command -> make VARNOME INT .)
    while           reduce using rule 21 (command -> make VARNOME INT .)
    repeat          reduce using rule 21 (command -> make VARNOME INT .)
    $end            reduce using rule 21 (command -> make VARNOME INT .)
    ]               reduce using rule 21 (command -> make VARNOME INT .)


state 49

    (22) command -> if : VARNOME . SINAIS INT [ program ]

    SINAIS          shift and go to state 54


state 50

    (23) command -> ifelse : VARNOME . SINAIS INT [ program ]

    SINAIS          shift and go to state 55


state 51

    (24) command -> while [ : . VARNOME SINAIS INT ] [ program ]

    VARNOME         shift and go to state 56


state 52

    (11) command -> setpos [ INT INT . ]

    ]               shift and go to state 57


state 53

    (20) command -> setpencolor [ INT INT . INT ]

    INT             shift and go to state 58


state 54

    (22) command -> if : VARNOME SINAIS . INT [ program ]

    INT             shift and go to state 59


state 55

    (23) command -> ifelse : VARNOME SINAIS . INT [ program ]

    INT             shift and go to state 60


state 56

    (24) command -> while [ : VARNOME . SINAIS INT ] [ program ]

    SINAIS          shift and go to state 61


state 57

    (11) command -> setpos [ INT INT ] .

    fd              reduce using rule 11 (command -> setpos [ INT INT ] .)
    forward         reduce using rule 11 (command -> setpos [ INT INT ] .)
    bk              reduce using rule 11 (command -> setpos [ INT INT ] .)
    back            reduce using rule 11 (command -> setpos [ INT INT ] .)
    lt              reduce using rule 11 (command -> setpos [ INT INT ] .)
    left            reduce using rule 11 (command -> setpos [ INT INT ] .)
    rt              reduce using rule 11 (command -> setpos [ INT INT ] .)
    right           reduce using rule 11 (command -> setpos [ INT INT ] .)
    setpos          reduce using rule 11 (command -> setpos [ INT INT ] .)
    setxy           reduce using rule 11 (command -> setpos [ INT INT ] .)
    setx            reduce using rule 11 (command -> setpos [ INT INT ] .)
    sety            reduce using rule 11 (command -> setpos [ INT INT ] .)
    penup           reduce using rule 11 (command -> setpos [ INT INT ] .)
    pu              reduce using rule 11 (command -> setpos [ INT INT ] .)
    pendown         reduce using rule 11 (command -> setpos [ INT INT ] .)
    pd              reduce using rule 11 (command -> setpos [ INT INT ] .)
    home            reduce using rule 11 (command -> setpos [ INT INT ] .)
    setpencolor     reduce using rule 11 (command -> setpos [ INT INT ] .)
    make            reduce using rule 11 (command -> setpos [ INT INT ] .)
    if              reduce using rule 11 (command -> setpos [ INT INT ] .)
    ifelse          reduce using rule 11 (command -> setpos [ INT INT ] .)
    while           reduce using rule 11 (command -> setpos [ INT INT ] .)
    repeat          reduce using rule 11 (command -> setpos [ INT INT ] .)
    $end            reduce using rule 11 (command -> setpos [ INT INT ] .)
    ]               reduce using rule 11 (command -> setpos [ INT INT ] .)


state 58

    (20) command -> setpencolor [ INT INT INT . ]

    ]               shift and go to state 62


state 59

    (22) command -> if : VARNOME SINAIS INT . [ program ]

    [               shift and go to state 63


state 60

    (23) command -> ifelse : VARNOME SINAIS INT . [ program ]

    [               shift and go to state 64


state 61

    (24) command -> while [ : VARNOME SINAIS . INT ] [ program ]

    INT             shift and go to state 65


state 62

    (20) command -> setpencolor [ INT INT INT ] .

    fd              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    forward         reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    bk              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    back            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    lt              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    left            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    rt              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    right           reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    setpos          reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    setxy           reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    setx            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    sety            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    penup           reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    pu              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    pendown         reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    pd              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    home            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    setpencolor     reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    make            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    if              reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    ifelse          reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    while           reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    repeat          reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    $end            reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)
    ]               reduce using rule 20 (command -> setpencolor [ INT INT INT ] .)


state 63

    (22) command -> if : VARNOME SINAIS INT [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    program                        shift and go to state 66
    command                        shift and go to state 2

state 64

    (23) command -> ifelse : VARNOME SINAIS INT [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    program                        shift and go to state 67
    command                        shift and go to state 2

state 65

    (24) command -> while [ : VARNOME SINAIS INT . ] [ program ]

    ]               shift and go to state 68


state 66

    (22) command -> if : VARNOME SINAIS INT [ program . ]
    (2) program -> program . command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    ]               shift and go to state 69
    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    command                        shift and go to state 26

state 67

    (23) command -> ifelse : VARNOME SINAIS INT [ program . ]
    (2) program -> program . command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    ]               shift and go to state 70
    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    command                        shift and go to state 26

state 68

    (24) command -> while [ : VARNOME SINAIS INT ] . [ program ]

    [               shift and go to state 71


state 69

    (22) command -> if : VARNOME SINAIS INT [ program ] .

    fd              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    forward         reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    bk              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    back            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    lt              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    left            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    rt              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    right           reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    setpos          reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    setxy           reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    setx            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    sety            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    penup           reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    pu              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    pendown         reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    pd              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    home            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    setpencolor     reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    make            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    if              reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    ifelse          reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    while           reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    repeat          reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    $end            reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)
    ]               reduce using rule 22 (command -> if : VARNOME SINAIS INT [ program ] .)


state 70

    (23) command -> ifelse : VARNOME SINAIS INT [ program ] .

    fd              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    forward         reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    bk              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    back            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    lt              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    left            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    rt              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    right           reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    setpos          reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    setxy           reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    setx            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    sety            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    penup           reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    pu              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    pendown         reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    pd              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    home            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    setpencolor     reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    make            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    if              reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    ifelse          reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    while           reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    repeat          reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    $end            reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)
    ]               reduce using rule 23 (command -> ifelse : VARNOME SINAIS INT [ program ] .)


state 71

    (24) command -> while [ : VARNOME SINAIS INT ] [ . program ]
    (1) program -> . command
    (2) program -> . program command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    program                        shift and go to state 72
    command                        shift and go to state 2

state 72

    (24) command -> while [ : VARNOME SINAIS INT ] [ program . ]
    (2) program -> program . command
    (3) command -> . fd INT
    (4) command -> . forward INT
    (5) command -> . bk INT
    (6) command -> . back INT
    (7) command -> . lt INT
    (8) command -> . left INT
    (9) command -> . rt INT
    (10) command -> . right INT
    (11) command -> . setpos [ INT INT ]
    (12) command -> . setxy INT INT
    (13) command -> . setx INT
    (14) command -> . sety INT
    (15) command -> . penup
    (16) command -> . pu
    (17) command -> . pendown
    (18) command -> . pd
    (19) command -> . home
    (20) command -> . setpencolor [ INT INT INT ]
    (21) command -> . make VARNOME INT
    (22) command -> . if : VARNOME SINAIS INT [ program ]
    (23) command -> . ifelse : VARNOME SINAIS INT [ program ]
    (24) command -> . while [ : VARNOME SINAIS INT ] [ program ]
    (25) command -> . repeat command

    ]               shift and go to state 73
    fd              shift and go to state 3
    forward         shift and go to state 4
    bk              shift and go to state 5
    back            shift and go to state 6
    lt              shift and go to state 7
    left            shift and go to state 8
    rt              shift and go to state 9
    right           shift and go to state 10
    setpos          shift and go to state 11
    setxy           shift and go to state 12
    setx            shift and go to state 13
    sety            shift and go to state 14
    penup           shift and go to state 15
    pu              shift and go to state 16
    pendown         shift and go to state 17
    pd              shift and go to state 18
    home            shift and go to state 19
    setpencolor     shift and go to state 20
    make            shift and go to state 21
    if              shift and go to state 22
    ifelse          shift and go to state 23
    while           shift and go to state 24
    repeat          shift and go to state 25

    command                        shift and go to state 26

state 73

    (24) command -> while [ : VARNOME SINAIS INT ] [ program ] .

    fd              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    forward         reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    bk              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    back            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    lt              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    left            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    rt              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    right           reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    setpos          reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    setxy           reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    setx            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    sety            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    penup           reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    pu              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    pendown         reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    pd              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    home            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    setpencolor     reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    make            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    if              reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    ifelse          reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    while           reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    repeat          reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    $end            reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)
    ]               reduce using rule 24 (command -> while [ : VARNOME SINAIS INT ] [ program ] .)

